<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jihackstory.github.io/</id><title>Jihack Story</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-05-10T15:22:32+09:00</updated> <author> <name>Jihackstory</name> <uri>https://jihackstory.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jihackstory.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://jihackstory.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Jihackstory </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[1005][G3] ACM Craft (Python)</title><link href="https://jihackstory.github.io/posts/BJ_1005/" rel="alternate" type="text/html" title="[1005][G3] ACM Craft (Python)" /><published>2021-03-11T20:55:00+09:00</published> <updated>2021-05-10T15:21:57+09:00</updated> <id>https://jihackstory.github.io/posts/BJ_1005/</id> <content src="https://jihackstory.github.io/posts/BJ_1005/" /> <author> <name>Jihackstory</name> </author> <category term="Baekjoon challenge" /> <category term="Gold" /> <summary> 1005번 문제 백준 1005번 건물을 짓는 게임이 있다. 여기서 각 건물들은 건물 시간을 가지고 있으며 건물을 짓기 위해서는 먼저 특정 건물이 건설이 완료되어야 합니다. 마치 스타크래프트에서 건물을 지으려면 먼저 지어야하는 건물이 있는 것과 마찬가지입니다. 이 게임에서 우승하는 방법은 특정 건물을 최단 시간 내로 지어야 합니다. 매 게임마다 특정 건물을 짓기 위한 순서가 달라지고 특정 건물 또한 달라집니다. 이때 게임에 우승하기 위한 최소 시간을 알아내는 프로그램을 구현하는 것이 목적입니다. 문제 접근 우선 선행 되어야 하는 건물이 모두 지어져야 현재 건물을 지을 수 있습니다. 이 말은 선행 건물 중 제일 건설 시간이 오래 걸리는 건물이 지어져야 현재 건물을 지을 수 있습니다. 그... </summary> </entry> <entry><title>[1004][S3] 어린 왕자(Python)</title><link href="https://jihackstory.github.io/posts/BJ_1004/" rel="alternate" type="text/html" title="[1004][S3] 어린 왕자(Python)" /><published>2021-03-09T20:55:00+09:00</published> <updated>2021-05-10T15:21:57+09:00</updated> <id>https://jihackstory.github.io/posts/BJ_1004/</id> <content src="https://jihackstory.github.io/posts/BJ_1004/" /> <author> <name>Jihackstory</name> </author> <category term="Baekjoon challenge" /> <category term="Silver" /> <summary> 1004번 문제 백준 1004번 그림과 같이 좌표에 다양한 원이 있고 서로 다른 두 점(빨간점)이 있습니다. 어린 왕자가 한 점에서 다른 점으로 가고 싶을 때 최소한으로 원의 경계를 지나는 횟수를 출력해야 하는 문제입니다. 문제 접근 두 점을 직선으로 잇게 된다면 당연히 많은 경계를 지날 수 밖에 없습니다. 그래서 최소한으로 경계를 지나는 방법을 어떻게 찾아야 하는데…… 두 점이 원과 어떠한 관계가 있을 때 경계를 지나는 경우 3 가지를 생각해 보았습니다. case 1) 원 안에 두 점이 모두 위치 -&amp;gt; 경계를 지나지 않음 case 2) 원 밖에 두 점이 모두 위치 -&amp;gt; 경계를 지나지 않음 case 3) 한 점은 원 안에 한 점은 원 밖에 위치 -&amp;gt; 경계를 지... </summary> </entry> <entry><title>[1003][S3] 피보나치 (Python)</title><link href="https://jihackstory.github.io/posts/BJ_1003/" rel="alternate" type="text/html" title="[1003][S3] 피보나치 (Python)" /><published>2021-03-08T20:55:00+09:00</published> <updated>2021-05-10T15:21:57+09:00</updated> <id>https://jihackstory.github.io/posts/BJ_1003/</id> <content src="https://jihackstory.github.io/posts/BJ_1003/" /> <author> <name>Jihackstory</name> </author> <category term="Baekjoon challenge" /> <category term="Silver" /> <summary> 1003번 문제 백준 1003번 익숙한 피보나치 수열에 관한 문제입니다. int fibonacci(int n) { if (n == 0) { printf("0"); return 0; } else if (n == 1) { printf("1"); return 1; } else { return fibonacci(n‐1) + fibonacci(n‐2); } } 하지만 단순히 피보나치 수열을 구현하는 것이 아닌 위와 같이 피보나치 수열을 구현한 재귀 함수에서 0과 1이 반환되는 횟수를 구하는 문제입니다. 문제 접근 이 문제는 재귀 함수를 선언하여 일일이 0과 1의 횟수를 세면 시간 제한에 걸리게 됩니다... </summary> </entry> <entry><title>[1002][S4] 터렛 (Python)</title><link href="https://jihackstory.github.io/posts/BJ_1002/" rel="alternate" type="text/html" title="[1002][S4] 터렛 (Python)" /><published>2021-03-07T20:55:00+09:00</published> <updated>2021-05-10T15:21:57+09:00</updated> <id>https://jihackstory.github.io/posts/BJ_1002/</id> <content src="https://jihackstory.github.io/posts/BJ_1002/" /> <author> <name>Jihackstory</name> </author> <category term="Baekjoon challenge" /> <category term="Silver" /> <summary> 1002번 문제 백준 1002번 처음 실버 문제이다. 두 좌표가 A, B가 주어지며 이 좌표로부터 r1, r2 거리만큼 떨어진 좌표 C가 있다. 이때, C가 있을 수 있는 좌표의 수를 구하는 프로그램을 작성해야한다. 문제 접근 이 문제는 기하학을 통해 좌표 변환을 한다면 어렵지 않게 구현할 수 있다. 기본 아이디어는 두 원의 교점을 통해 좌표 C의 수를 구할 수 있다. 주어진 문제를 좌표 축에 표현하면 아래 그림의 왼쪽과 같으며 좌표 A와 B를 각각 (x1, y1), (x2, y2) 일 때 좌표 C를 (a, b)라 할 수 있다. C 점은 r1, r2의 관계와 A 점, B 점과의 관계에 따라 존재할 수 있는 경우가 다르다. 문제를 좀 더 쉽게 풀기 위해서 기하학적인 개념을 적용한다. 즉,... </summary> </entry> <entry><title>[1001][B5] A-B 문제 풀이 (Python)</title><link href="https://jihackstory.github.io/posts/BJ_1001/" rel="alternate" type="text/html" title="[1001][B5] A-B 문제 풀이 (Python)" /><published>2021-03-06T20:55:00+09:00</published> <updated>2021-05-10T15:21:57+09:00</updated> <id>https://jihackstory.github.io/posts/BJ_1001/</id> <content src="https://jihackstory.github.io/posts/BJ_1001/" /> <author> <name>Jihackstory</name> </author> <category term="Baekjoon challenge" /> <category term="Bronze" /> <summary> 1001번 문제 백준 1001번 아직 초창기 문제이기 때문에 백준에 익숙해 지는 단계입니다. 이전 1000번 문제와 유사하게 1001번 문제인 빼기 문제로 코드는 다음과 같습니다. 문제 풀이 # 숫자 하나를 입력 받았을때 # 백준에선 일반적으로 표준 입력 수가 명시된다. import sys # 띄어쓰기로 나누어진 입력을 리스트로 받습니다. data = list(map(int, sys.stdin.readline().split())) # 두 수의 차를 출력합니다. print(data[0]-data[1]) </summary> </entry> </feed>
